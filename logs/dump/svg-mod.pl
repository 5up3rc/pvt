#!/usr/bin/perl
# This script is a part of PVT code.
# Reads svg file generated by dot and creates new with JS events.
# Also changes some SVG properties and creates mapping of PHP 
# functions to their locations.

use strict;
use warnings;
use Cwd;
use File::Find qw(finddepth);

$| = 1;

my $mode = shift || '';
my $path = shift || die('Provide path to scan!');
if ($mode ne 'a' && $mode ne 'w') {
    die('Provide proper mode - "a" or "w".');
}
my $pwd = getcwd();
my $work_dir = "$pwd/pvt-common-$mode";
my $in_file  = "$work_dir/trace-functions.dot";
my $out_file = "$work_dir/graph";

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Some action here
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

print "\nPVT SVG beautyfier\n\n";
print "Generating SVG files...";

# Generate SVG file - it can output several files
if (-e $in_file) {
    `dot -Tsvg -O $in_file`;
} else {
    die("\nNo such file: $in_file! Maybe try to run me from path when I reside?\n");
}
print " done.\n";
print "Parsing SVG files...";

my @files = glob "$work_dir/trace-functions\.*\.svg";

# Now parse each available file
my $num = 0;
for my $file (@files) {
    
    open SVG_FILE, '<', "$file"
        or die "\tUnable to open $file.\n";
    my @svg = <SVG_FILE>;
    close SVG_FILE;
    
    open PARSED, '>', "$out_file$num.svg"
        or die "\tUnable to open $out_file$num.svg.\n";

    for my $line (@svg) {
        my $print = 1;
        
        # Insert stylesheet
        if ($line =~ /<\?xml version="1.0" encoding="UTF-8" standalone="no"\?>/) {
            print PARSED $line;
            print PARSED "<?xml-stylesheet href=\"../helpers/svg.css\" type=\"text/css\"?>\n";
            $print = 0;
        }

        # First insert is for JavaScript source code
        if ($line =~ m#xmlns:xlink="http://www\.w3\.org/1999/xlink">#) {
            print PARSED $line;
            print PARSED "<script type=\"text/ecmascript\" xlink:href=\"../helpers/svg.js\"></script>\n";
            $print = 0;
        }
        
        # Other inserts are for custom JavaScript events
        if ($line =~ m/<a\s+xlink:href="javascript:xx\((\d+)\)">/) {
            print PARSED "<a onclick=\"cs(this)\" class=\"_$1\" onmouseover=\"ce(this)\" onmouseout=\"cd(this)\">\n";
            $print = 0;
        }

        # Replace [id's]
        if ($line =~ m#>(?:.*?)\(\) \[\d+\]</text>#) {
            $line =~ s#>(.*?)\(\)\s+\[(\d+)\]</text># onclick="cb(this)" class="_$2">$1()</text>#;
        }

        if ($line =~ m#>::(?:\d+)</text>#) {
            $line =~ s#>::(\d+)</text># onclick="cl(this, '$1')">$1</text>#;
        }

        # Just remove that shit, we haz CSSz!
        $line =~ s/font-family="(?:.*?)" font-size="(?:.*?)"//g;


        if ($line =~ m#<a xlink:href="(?:.*?)" xlink:title="(?:.*?)">#) {
            $line =~ s#<a xlink:href="(.*?)" xlink:title="(.*?)">#<a xlink:title="$1">#;
        }

        # Just remove that shit, disrtubing
        $line =~ s#<title>(.*?)</title>##;
        $line =~ s#<!--(.*?)-->##;

        if ($print) {
            print PARSED $line;
        }
    }
    
    $num++;
    close PARSED;
}

if ($num == 0) {
    print " no files to parse, quitting.\n";
    exit(0);
}

print " done.\n";
print "Mapping functions to their locations...";

# Now start mapping
open PARSED, '>', "pvt-common-$mode/mapped-funcs.php"
    or die "Unable to open pvt-common-$mode/mapped-funcs.php\n";

print PARSED "<?php
\$mapped_funcs = array(
";
&scanFolder($path);
print PARSED "\t'' => ''\n);\n";
close PARSED;

print "done.\n";
print "\nNow you can browse show.html\n";

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Subroutines
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub scanFolder() {
    my $path = shift;
    
    opendir (DIR, $path) 
        or die "Unable to open $path\n";
    my @names = readdir(DIR) 
        or die "Unable to read $path\n";
    closedir(DIR);
    
    for my $file (@names) {
        
        if ($file eq '.' || $file eq '..') {
            next;
        }
        if (-d "$path/$file") {
            &scanFolder("$path/$file");
        }
        if (-f "$path/$file") {
            parseFile("$path/$file");
        }
    }
}

sub parseFile() {
    my $file = shift;

    if ($file !~ m#^(?:.*?)\.(inc|php)$#) {
        return;
    }

    open PHP_FILE, '<', "$file"
        or die "\tUnable to open $file.\n";
    my @php = <PHP_FILE>;
    close PHP_FILE;

    my $i = 0;
    my $class = '';
    
    # Base, derived classes and other OOP shit...
    for my $line (@php) {
        
        $i++;
        if ($line =~ m/(?:^(?:|\t|\s+)class ([a-zA-Z_\x7f-\xff][a-z0-9_\x7f-\xff]*)(?:|\s+)(?:|extends|derives)(?:{|$))/) {
            $class = $1;
        }
        
        if ($line =~ m/(?:\s+|\t|^)function ([a-zA-Z_\x7f-\xff][a-z0-9_\x7f-\xff]*)\((.*?)(?:\)|,)/) {
            my $func = $1;
            if ($class ne '') {
                $func = "$class->$func";
            }
            print PARSED "\t'$func' => '$file:$i',\n"
        }
    }
}
